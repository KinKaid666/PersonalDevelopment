TESTCASES: p544-01b
===================

We increased machine memory from 32 pages to 128 pages.  This allows us to
load ~3 programs simultaneously.

Also, we currently don't have anything that shows that user threads can be
synchronized.

Please note that joins did not work when we started the 
testcases.  So some examples have the shell prompt come out
in the middle of a foreground process's input.  This is no
longer the case with joins.  The shell now joins on 
foreground processes.

Headings will indicate what system calls are used within an example.
i.e. If join worked in an example, the system call will be included in 
the heading.  A star will be included next to the syscall(s) that are 
the focus of the example. (e.g. *Halt )

It will be clear in the examples that argument passing works.  We
currently allow for each argument to be 16 characters long (max) and
allow for 4 arguments.  Random extra whitespace will cause parsing to 
be incorrect.  A final argument of "&" puts the job in the background.
This must be separated by a space from the previous token.


Comments here will be indicated with COMMENT
The unix prompt will be indicated with "Unix % "
Our Nachos shell prompt is "kssh> "


*Exec / *Halt / Write - halt.c
----------------------------
Welcome to the Kitchen Sink Shell (kssh) v0.2
kssh> halt
Machine halting!


Exec / *Exit / Write - using an example program "exit.c"
-------------------------------------------------------
COMMENT The following code...
int
main()
{
    Write( "Exiting\n", 8, 1 );
    Exit( 0 );
    Write( "Never Reached\n", 14, 1 );

} // main

COMMENT ...has the the following effect:
Unix % !u
u*/n* -x test/shell
Welcome to the Kitchen Sink Shell (kssh) v0.2
kssh> test/exit
Exiting
kssh> 

COMMENT: It is shown to work because the second print statement isn't reached.


Exec / *Join / Write - echo.c
-------------------

kssh> 
kssh> echo one two three
echo: command not found         COMMENT included just for fun
kssh> test/echo one two three
one two three                   COMMENT shell joins on foreground processes
kssh> test/echo one two &
onekssh>  two                   COMMENT for background proc, shell didn't join
				COMMENT so output is mixed.


Exec / *Create / Join / Write - touch.c
----------------------------

Unix % ls
BUGS                Makefile.dep        filesys             userprog
CVS                 TESTCASES.userprog  machine
Makefile            bin                 test
Makefile.common     core                threads

COMMENT nachos was already running with the shell...

Unix % fg 
u*/n* -x test/shell
test/touch BUGS newFile1 myFileTwo
File 'BUGS' Already Exists
kssh> ^Z
[1]+  Stopped                 u*/n* -x test/shell
Unix % ls
BUGS                Makefile.dep        filesys             test
CVS                 TESTCASES.userprog  machine             threads
Makefile            bin                 myFileTwo           userprog
Makefile.common     core                newFile1
Unix %  


Exec / *Open / *Read / *Close / *Write - cat.c
------------------------------------------
COMMENT Test open read and close using cat:
COMMENT First use UNIX cat
Unix % cat someText.txt
#
#       ~/.login shell configuration file
#
#       This file contains configuration command which will be executed
#       by the shell only when you log in to the system.  This means that
#       these will NOT be done by shell windows you start after you log in.

... COMMENT much output removed here


COMMENT ok, now time for our cat
Unix % !u
u*/n* -x test/shell
Welcome to the Kitchen Sink Shell (kssh) v0.2
kssh> test/cat someText.txt
#
#       ~/.login shell configuration file
#
#       This file contains configurationkssh>  command which will be executed
#       by the shell only when you log in to the system.  This means that
#       these will NOT be done by shell windows you start after you log in.

... COMMENT much output removed again

COMMENT Note that prompt was written up above after the word configuration.
COMMENT Enter was hit again for the prompt below.


kssh> test/halt
Machine halting!

Unix %

Exec / *Fork / *ThreadExit / Write - fork.c
--------------------------------

Unix % ../userprog/nachos -x shell
Welcome to the Kitchen Sink Shell (kssh) v1.0
kssh> fork
** begining1			COMMENT: First thread
** done1
** begining2			COMMENT: Second thread
** done2			COMMENT: Thread exit called
kssh> halt

COMMENT: We return find from our threadexit call fine.

Machine halting!


Exec / *Yield / *GetProcCount / Write - yield.c
-----------------------------------

x % ../userprog/nachos -x shell
Welcome to the Kitchen Sink Shell (kssh) v1.0
kssh> yield		COMMENT: Yield pauses it for a few seconds
kssh> yield &
kssh> procCount
2			COMMENT:  I wasn't fast enough to get the yield
kssh> yield &
kssh> procCount		COMMENT:  Here I was!
3
kssh> halt
Machine halting!


Exec / *ThreadExit / Write  - echo.c
------------------------------
COMMENT: Using echo.  echo.c has a ThreadExit call at the end of main.

Welcome to the Kitchen Sink Shell (kssh) v0.2
kssh> test/echo one two three
onekssh>  two three 
test/halt
Machine halting!


Exec / *ProcInfo / *getProcCount / Write / Join - ps.c
-----------------------------------------------
Unix % u*/n* -x test/shell
Welcome to the Kitchen Sink Shell (kssh) v1.0
kssh> test/ps
Name                   PID      PPID   Threads     Joins  Children
test/shell               0         0         1         0         1
test/ps                  1         0         1         1         0
kssh> 
