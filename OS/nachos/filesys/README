Our maximum file size is on the order of 64 exabytes.

Currently, getNode() returns NULL if a node is not found, or if a node is 
locked.  This makes it difficult to do (for example)
**
while((node = getNode(nodeID)) == NULL)
    Yield();
**
as this can cause a lockup if nodeID does not exist or there is another error. 
We realized during the presentations that this is easy to fix. The NodeCache and 
DataCache objects keep track of locking by setting bool in_use  on each cache 
entry. If we replace this with Lock *in_use and Acquire()/Release() the 
Lock instead of setting/clearing the in_use bool, and only return NULL on a 
real error, we fix most synch problems. We have not changed this in the code 
because we are ready to submit but would like to point it out.

There are some stability bugs. If the system runs for a while, some things 
crash but the same operations performed on subsequent runs of nachos 
will work. This may be bugs we missed in the FileSystem or it may be leftover 
bugs from other sections of the project.  Typically, these situations are 
re-creatable and some are mentioned in the TESTCASES file.

Our biggest bug/lack of feature is deletes while a file is open. We have no 
way of handling this. We had planned on keeping a global open file list. When 
a file is opened and a delete occurs, either the pointer to the file sub-tree 
(in the directory INTERNAL node) will be cleared but the sub-tree will not be 
freed until all open instances are closed; or (if this caused problems we 
hadn't thought about) we would mark a bit in this global table and check for 
this bit when Open() is called.
